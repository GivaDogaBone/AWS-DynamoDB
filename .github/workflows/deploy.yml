# .github/workflows/deploy.yml
name: Deploy Venues API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov

    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt -check

    - name: Check if table exists and import
      id: check_table
      run: |
        # Check if the DynamoDB table already exists in AWS
        if aws dynamodb describe-table --table-name venues &>/dev/null; then
          echo "DynamoDB table 'venues' already exists"
          echo "table_exists=true" >> $GITHUB_OUTPUT
          
          # Check if the table is already in the Terraform state
          if ! terraform state list | grep -q aws_dynamodb_table.venues; then
            echo "Importing existing table into Terraform state"
            terraform import aws_dynamodb_table.venues venues || echo "Import failed, but continuing"
          else
            echo "Table already in Terraform state"
          fi
        else
          echo "table_exists=false" >> $GITHUB_OUTPUT
          echo "Table doesn't exist yet, will be created by Terraform"
        fi

    - name: Terraform Plan
      run: terraform plan -var-file="terraform.tfvars"

    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Apply with auto-approve
        terraform apply -var-file="terraform.tfvars" -auto-approve || true
        
        # Verify that the apply either succeeded or failed due to "Table already exists"
        status=$?
        if [ $status -ne 0 ]; then
          # Check if the error was because the table already exists
          if aws dynamodb describe-table --table-name venues &>/dev/null; then
            echo "Table already exists and is available. Proceeding with deployment."
            
            # Force refresh state
            terraform refresh -var-file="terraform.tfvars"
            
            # Consider deployment successful
            exit 0
          else
            echo "Terraform apply failed for reasons other than 'Table already exists'"
            exit 1
          fi
        fi

  deploy_app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install aws-cdk-lib

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Build and package application
      run: |
        mkdir -p dist
        cp -r *.py dist/
        pip install -r requirements.txt -t dist/
        cd dist && zip -r ../lambda_function.zip .

    - name: Deploy to AWS Lambda
      run: |
        # Update the Lambda function (or create if not exists)
        if aws lambda get-function --function-name venues-api 2>/dev/null; then
          aws lambda update-function-code \
            --function-name venues-api \
            --zip-file fileb://lambda_function.zip
        else
          aws lambda create-function \
            --function-name venues-api \
            --runtime python3.9 \
            --role ${{ secrets.LAMBDA_EXECUTION_ROLE }} \
            --handler lambda_handler.handler \
            --zip-file fileb://lambda_function.zip \
            --environment "Variables={CUSTOM_AWS_REGION=${{ secrets.AWS_REGION }},DYNAMODB_TABLE_NAME=venues}"
        fi

    - name: Update API Gateway
      run: |
        # Check if API Gateway exists
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='venues-api'].id" --output text)
        
        # Get Lambda function ARN
        LAMBDA_ARN=$(aws lambda get-function \
          --function-name venues-api \
          --query "Configuration.FunctionArn" --output text)
        
        # Get AWS account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
        
        if [ -z "$API_ID" ]; then
          echo "API Gateway not found. Creating new one..."
          
          # Create a new REST API
          API_ID=$(aws apigateway create-rest-api \
            --name "venues-api" \
            --description "API for Venues application" \
            --endpoint-configuration "types=REGIONAL" \
            --query "id" --output text)
          
          echo "Created new API Gateway with ID: $API_ID"
          
          # Get the root resource ID
          ROOT_ID=$(aws apigateway get-resources \
            --rest-api-id $API_ID \
            --query "items[?path=='/'].id" --output text)
          
          # Create a proxy resource with {proxy+} path
          RESOURCE_ID=$(aws apigateway create-resource \
            --rest-api-id $API_ID \
            --parent-id $ROOT_ID \
            --path-part "{proxy+}" \
            --query "id" --output text)
          
          # Create ANY method for the proxy resource
          aws apigateway put-method \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method ANY \
            --authorization-type NONE
          
          # Create integration with Lambda for proxy
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method ANY \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:${{ secrets.AWS_REGION }}:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations"
          
          # Set up method response
          aws apigateway put-method-response \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method ANY \
            --status-code 200 \
            --response-models '{"application/json":"Empty"}'
          
          # Set up integration response
          aws apigateway put-integration-response \
            --rest-api-id $API_ID \
            --resource-id $RESOURCE_ID \
            --http-method ANY \
            --status-code 200 \
            --response-templates '{"application/json":""}'
          
          # Create ANY method for the root resource
          aws apigateway put-method \
            --rest-api-id $API_ID \
            --resource-id $ROOT_ID \
            --http-method ANY \
            --authorization-type NONE
          
          # Create integration with Lambda for root
          aws apigateway put-integration \
            --rest-api-id $API_ID \
            --resource-id $ROOT_ID \
            --http-method ANY \
            --type AWS_PROXY \
            --integration-http-method POST \
            --uri "arn:aws:apigateway:${{ secrets.AWS_REGION }}:lambda:path/2015-03-31/functions/$LAMBDA_ARN/invocations"
          
          # Set up method response for root
          aws apigateway put-method-response \
            --rest-api-id $API_ID \
            --resource-id $ROOT_ID \
            --http-method ANY \
            --status-code 200 \
            --response-models '{"application/json":"Empty"}'
          
          # Set up integration response for root
          aws apigateway put-integration-response \
            --rest-api-id $API_ID \
            --resource-id $ROOT_ID \
            --http-method ANY \
            --status-code 200 \
            --response-templates '{"application/json":""}'
          
          # Create a deployment
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod
        else
          echo "API Gateway found with ID: $API_ID"
          
          # Create a new deployment to update changes
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod
        fi
        
        # Add Lambda permissions for API Gateway (try to remove existing ones first to avoid duplicates)
        aws lambda remove-permission \
          --function-name venues-api \
          --statement-id apigateway-invoke-proxy || true
        
        aws lambda remove-permission \
          --function-name venues-api \
          --statement-id apigateway-invoke-root || true
        
        # Add new permissions
        echo "Adding Lambda permissions for API Gateway..."
        
        # Permission for proxy resource
        aws lambda add-permission \
          --function-name venues-api \
          --statement-id apigateway-invoke-proxy \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:${{ secrets.AWS_REGION }}:$ACCOUNT_ID:$API_ID/*/*/{proxy+}"
        
        # Permission for root resource
        aws lambda add-permission \
          --function-name venues-api \
          --statement-id apigateway-invoke-root \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:${{ secrets.AWS_REGION }}:$ACCOUNT_ID:$API_ID/*/*/*"
        
        # Save the API URL to a file for reference
        echo "API Gateway URL: https://$API_ID.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/prod" > api_url.txt
        echo "To access your API, use: https://$API_ID.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/prod/venues"
