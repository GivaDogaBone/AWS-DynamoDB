# .github/workflows/deploy.yml
name: Deploy Venues API

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  test:
    name: Test Application
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml
      
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: false

  terraform:
    name: Terraform Infrastructure
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.0.0
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Format
      run: terraform fmt -check
      
    - name: Terraform Plan
      run: terraform plan -var-file="terraform.tfvars"
      
    - name: Terraform Apply with Clean Deployment
      if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
      run: |
        # Attempt to destroy existing infrastructure (ignore errors)
        terraform destroy -var-file="terraform.tfvars" -auto-approve || true
        
        # Apply the configuration to create fresh resources
        terraform apply -var-file="terraform.tfvars" -auto-approve

  deploy_app:
    name: Deploy Application
    runs-on: ubuntu-latest
    needs: terraform
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install aws-cdk-lib
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Build and package application
      run: |
        mkdir -p dist
        cp -r *.py dist/
        pip install -r requirements.txt -t dist/
        cd dist && zip -r ../lambda_function.zip .
        
    - name: Deploy to AWS Lambda
      run: |
        # Update the Lambda function (or create if not exists)
        if aws lambda get-function --function-name venues-api 2>/dev/null; then
          aws lambda update-function-code \
            --function-name venues-api \
            --zip-file fileb://lambda_function.zip
        else
          aws lambda create-function \
            --function-name venues-api \
            --runtime python3.9 \
            --role ${{ secrets.LAMBDA_EXECUTION_ROLE }} \
            --handler lambda_handler.handler \
            --zip-file fileb://lambda_function.zip \
            --environment "Variables={AWS_REGION=${{ secrets.AWS_REGION }}}"
        fi
        
    - name: Update API Gateway (if needed)
      run: |
        # This is a simplified example - you might need a more complex setup
        # depending on your specific API Gateway configuration
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='venues-api'].id" --output text)
        
        if [ -z "$API_ID" ]; then
          echo "API Gateway not found. Creating new one..."
          # Create API Gateway here (complex logic omitted)
        else
          echo "API Gateway found. Deploying changes..."
          aws apigateway create-deployment \
            --rest-api-id $API_ID \
            --stage-name prod
        fi